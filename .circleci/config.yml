version: 2.1
commands:
  setup:
    description: "Install tools and configure kubectl"
    steps:
      - aws-cli/install
      - kubernetes/install
      - helm/install-helm-client:
          version: v3.0.2
      - run:
          name: Setup kubectl
          command: |
            echo -n "${KUBE_ENV_CACERT}" | base64 -d > /tmp/cluster_ca.crt
            kubectl config set-cluster "${KUBE_ENV_NAME}" \
              --certificate-authority="/tmp/cluster_ca.crt" \
              --server="https://api.${KUBE_ENV_NAME}"
            kubectl config set-credentials circleci \
              --token="${KUBE_ENV_TOKEN}"
            kubectl config set-context circleci \
              --cluster="${KUBE_ENV_NAME}" \
              --user="circleci" \
              --namespace="${KUBE_ENV_NAMESPACE}"
            # confirm setup is ok
            kubectl config use-context circleci

  deploy_to_env:
    parameters:
      env:
        type: string
      slack_notification:
        type: boolean
        default: false
    steps:
      - setup
      - checkout:
          path: ~/git
      - attach_workspace:
          at: ~/app
      - deploy:
          name: Deploy to << parameters.env >>
          command: |
            APP=prison-estate
            APP_VERSION=$(cat ~/app/app_version.txt)
            echo "export APP_VERSION=$APP_VERSION;export APP=$APP" >> $BASH_ENV
            sed -i "s/appVersion: \".*\"/appVersion: \"${APP_VERSION}\"/g" ~/git/helm_deploy/${APP}/Chart.yaml
            aws secretsmanager --region ${AWS_DEFAULT_REGION} get-secret-value --secret-id ${KUBE_ENV_NAMESPACE} | jq -r .SecretString | \
            helm upgrade ${APP} ~/git/helm_deploy/${APP}/. \
              --install --wait --reset-values --timeout 5m --history-max 10 \
              --namespace=${KUBE_ENV_NAMESPACE} \
              --values ~/git/helm_deploy/values-<< parameters.env >>.yaml \
              --values - \
              --set image.tag="${APP_VERSION}"
      - when:
          condition: <<parameters.slack_notification>>
          steps:
            - slack/notify:
                message: "*${APP}* version:*${APP_VERSION}* deployed to << parameters.env >>"
                include_project_field: false
                include_job_number_field: false

executors:
  deployer:
    docker:
      - image: circleci/python:3
    working_directory: ~/app
  builder:
    docker:
      - image: circleci/openjdk:11-jdk
    environment:
      JAVA_TOOL_OPTIONS: -Xmx256m -XX:ParallelGCThreads=2 -XX:ConcGCThreads=2 -XX:ParallelGCThreads=2 -Djava.util.concurrent.ForkJoinPool.common.parallelism=2 -Dorg.gradle.daemon=false
    working_directory: ~/app

orbs:
  aws-cli: circleci/aws-cli@0.1.18
  kubernetes: circleci/kubernetes@0.10.1
  helm: circleci/helm@0.2.3
  owasp: entur/owasp@0.0.6
  slack: circleci/slack@3.4.2

jobs:
  build:
    executor: builder
    steps:
      - checkout
      - restore_cache:
          keys:
            - gradle-{{ checksum "build.gradle.kts" }}
            - gradle-
      - run:
          command: ./gradlew build
      - run:
          name: Record the Application Version
          command: |
            jar xvf build/libs/prison-estate*.jar BOOT-INF/classes/META-INF/build-info.properties
            APP_VERSION=$(grep 'build.version=' BOOT-INF/classes/META-INF/build-info.properties | awk -F= '{print $2}')
            rm BOOT-INF/classes/META-INF/build-info.properties

            # make up a good version name
            ( [[ "$CIRCLE_BRANCH" == "master" ]] && echo "$APP_VERSION" || echo "$APP_VERSION.$CIRCLE_BRANCH" ) > ./app_version.txt

      - save_cache:
          paths:
            - ~/.gradle
          key: gradle-{{ checksum "build.gradle.kts" }}
      - store_test_results:
          path: build/test-results
      - store_artifacts:
          path: build/reports/tests
      - persist_to_workspace:
          root: .
          paths:
            - build/libs
            - build.gradle.kts
            - app_version.txt

  build_docker:
    executor: deployer
    steps:
      - checkout
      - attach_workspace:
          at: ~/app
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build container and publish to quay.io
          command: |
            APP_VERSION=$(cat ./app_version.txt)
            IMAGE_NAME="quay.io/hmpps/prison-estate"
            docker build --rm=false . \
               --tag "$IMAGE_NAME:$APP_VERSION" \
               --label "maintainer=info@digital.justice.gov.uk" \
               --label "app.version=$APP_VERSION" \
               --label "build.version=$APP_VERSION" \
               --label "build.number=$CIRCLE_BUILD_NUM" \
               --label "build.url=$CIRCLE_BUILD_URL" \
               --label "build.gitref=$CIRCLE_SHA1"

            if [[ "${CIRCLE_BRANCH}" == "master" ]]; then
              # publish to quay.io as the tag
              docker login -u $QUAYIO_USERNAME -p $QUAYIO_PASSWORD quay.io
              docker tag $IMAGE_NAME:$APP_VERSION $IMAGE_NAME:latest
              docker push $IMAGE_NAME:$APP_VERSION
              docker push $IMAGE_NAME:latest
            fi

  deploy_dev:
    executor: deployer
    steps:
      - deploy_to_env:
          env: "dev"

  deploy_preprod:
    executor: deployer
    steps:
      - deploy_to_env:
          env: "preprod"

  deploy_prod:
    executor: deployer
    steps:
      - deploy_to_env:
          env: "prod"
          slack_notification: true

workflows:
  version: 2
  build-test-and-deploy:
    jobs:
      - build:
          filters:
            tags:
              ignore: /.*/
      - build_docker:
          requires:
            - build
          filters:
            branches:
              only: master
      - deploy_dev:
          requires:
            - build_docker
      - request-preprod-approval:
          type: approval
          requires:
            - deploy_dev
      - deploy_preprod:
          context: prison-estate-preprod
          requires:
            - request-preprod-approval
      - request-prod-approval:
          type: approval
          requires:
            - deploy_preprod
      - deploy_prod:
          context: prison-estate-prod
          requires:
            - request-prod-approval
  scheduled:
    triggers:
      - schedule:
          cron: "0 7 * * 1-5"
          filters:
            branches:
              only:
                - master
    jobs:
      - owasp/gradle_owasp_dependency_check:
          executor: builder
